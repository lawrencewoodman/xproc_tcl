package require tcltest
namespace import tcltest::*

# Add module dir to tm paths
set ThisScriptDir [file dirname [info script]]
set ModuleDir [file normalize [file join $ThisScriptDir ..]]
::tcl::tm::path add $ModuleDir

source [file join $ThisScriptDir test_helpers.tcl]

package require xproc


################################
# tcltest is at bottom of file
################################


xproc::test xproc::proc {{t} {
  # Check errors
  set cases {
    {input {xproc::Dummy-1 {} {} -bob}
     returnCodes {error} result "unknown option: -bob"}
    {input {xproc::Dummy-2 {} {} bob}
     returnCodes {error} result "invalid number of arguments"}
    {input {xproc::Dummy-3 {a b} {
              expr {$a+$b}
            } -test {{t} {
              set got [xproc::Dummy-3 2 3]
              set want 5
              if {$got != $want} {
                xproc::fail $t "got: $got, want: $want"
              }
            }} -description {Add two numbers together}}
     passed 1 failed 0 minTotal 5 maxTotal 50}

  }
  xproc::testCases $t $cases {{case} {
    try {
      dict with case {
        xproc::proc {*}$input
        set gotSummary [xproc::runTests -match {::xproc::Dummy-*} -verbose 0]
        set wantDescriptions [
          dict create ::xproc::Dummy-3 {Add two numbers together}
        ]
        dict with gotSummary {
          if {$passed != $passed || $failed != $failed ||
              $total <= $minTotal || $total >= $maxTotal} {
            return -code error "summary incorrect - got: $gotSummary"
          }
        }
        set gotDescriptions [xproc::descriptions -match {::xproc::Dummy-*}]
        if {$gotDescriptions ne $wantDescriptions} {
          return -code error \
              "descriptions - got: $gotDescriptions, want: $wantDescriptions"
        }
      }
    } finally {
      xproc::remove all -match {::xproc::Dummy-*}
      catch {rename xproc::[lindex $input 0] ""}
    }
  }}
}}


xproc::test -id 1 xproc::remove {{t} {
  # Test errors
  set cases {
    {input {all -fred}
     returnCodes {error} result "unknown option: -fred"}
    {input {bob}
     returnCodes {error} result "unknown type: bob"}
  }
  xproc::testCases $t $cases {{case} {
    dict with case {xproc::remove {*}$input}
  }}
}}

xproc::test -id 2 xproc::remove {{t} {
  try {
    for {set n 1} {$n <= 3} {incr n} {
      xproc::proc xproc::Dummy-$n {a b} {
        expr {$a+$b}
      } -test {{t} {
        set got [xproc::Dummy-3 2 3]
        set want 5
        if {$got != $want} {
          xproc::fail $t "got: $got, want: $want"
        }
      }} -description {Add two numbers together}
    }
    xproc::remove tests -match {*Dummy-2}
    set gotSummary [xproc::runTests -match {::xproc::Dummy-*} -verbose 0]
    dict with gotSummary {
      if {$passed != 2 || $failed != 0 || $total < 5 || $total > 100} {
        xproc::fail $t \
            "after remove tests Dummy-2 - summary incorrect - got: $gotSummary"
      }
    }
    xproc::remove descriptions -match {*Dummy-3}
    set gotDescriptions [xproc::descriptions -match {::xproc::Dummy-*}]
    set gotDescriptionProcNames [dict keys $gotDescriptions]
    set wantDescriptionProcNames {::xproc::Dummy-1 ::xproc::Dummy-2}
    if {$gotDescriptionProcNames ne $wantDescriptionProcNames} {
      xproc::fail $t \
          "after remove descriptions Dummy-3 - descriptions - got keys: $gotDescriptionProcNames, want: $wantDescriptionProcNames"
    }
    xproc::remove all -match {::xproc::Dummy-*}
    set gotSummary [xproc::runTests -match {::xproc::Dummy-*} -verbose 0]
    dict with gotSummary {
      if {$passed != 0 || $failed != 0 || $total < 5 || $total > 100} {
        xproc::fail $t \
            "after remove all Dummy-* - summary incorrect - got: $gotSummary"
      }
    }
    set gotDescriptions [xproc::descriptions -match {::xproc::Dummy-*}]
    set gotDescriptionProcNames [dict keys $gotDescriptions]
    if {[llength $gotDescriptionProcNames] != 0} {
      xproc::fail $t \
          "after remove descriptions all Dummy-* descriptions - got keys: $gotDescriptionProcNames, want: $wantDescriptionProcNames"
    }
  } finally {
    xproc::remove all -match {::xproc::Dummy-*}
    rename xproc::Dummy-1 ""
    rename xproc::Dummy-2 ""
    rename xproc::Dummy-3 ""
  }
}}

xproc::test -id 1 xproc::test {{t} {
  # Test errors
  set cases {
    {input {DummyNotExist}
     returnCodes {error}
     result {invalid number of arguments}}
    {input {DummyNotExist {{t} {}}}
     returnCodes {error}
     result {procedureName doesn't exist: DummyNotExist}}
    {input {-id fred DummyNotExist {{t} {}}}
     returnCodes {error}
     result {invalid id: fred}}
    {input {-id 0 DummyNotExist {{t} {}}}
     returnCodes {error}
     result {invalid id: 0}}
    {input {-bob DummyNotExist {{t} {}}}
     returnCodes {error}
     result {unknown option: -bob}}
    {input {-id 1 xproc::test {{t} {}}}
     returnCodes {error}
     result {test already exists for id: 1}}
  }
  xproc::testCases $t $cases {{case} {
    dict with case {xproc::test {*}$input}
  }}
}}

xproc::test -id 2 xproc::test {{t} {
  # Test adding of tests
  try {
    xproc::test -- ::TestHelpers::addNums {{t} {
      set got [::TestHelpers::addNums 7 8 9]
      set want 24
      if {$got != $want} {xproc::fail $t "got: $got, want: $want"}
    }}
    xproc::test -id 2 ::TestHelpers::addNums {{t} {
      set got [::TestHelpers::addNums 1 2 3]
      set want 6
      if {$got != $want} {xproc::fail $t "got: $got, want: $want"}
    }}
    set summary [xproc::runTests -verbose 0 -match {::TestHelpers::addNums}]
    set wantPassed 2
    set wantFailed 0
    dict with summary {
      if {$passed != $wantPassed} {
        xproc::fail $t "got passed: $passed, want: $wantPassed"
      }
      if {$failed != $wantFailed} {
        xproc::fail $t "got failed: $failed, want: $wantFailed"
      }
    }
  } finally {
    xproc::remove all -match {::TestHelpers::addNums}
  }
}}


xproc::test xproc::runTests {{t} {
  set ch [TestHelpers::channelMonitor new]
  # Run all the tests except this one to prevent an infinite loop
  set tests [
    dict filter [xproc::tests -match {*xproc::*}] script {k v} {
      expr {![string match "*xproc::runTests" $k]}
    }
  ]
  set procNames [dict keys $tests]
  set summary [xproc::runTests -verbose 1 -channel $ch -match $procNames]
  dict with summary {
    set wantTotal [expr {$passed+$failed+$skipped}]
    if {$total != $wantTotal} {
      xproc::fail $t "got total: $total, want: $wantTotal"
    }
    if {$passed < 5} {
      xproc::fail $t "got passed: $passed, want: passed >= 5"
    }
    if {$skipped < 1} {
      xproc::fail $t "got skipped: $skipped, want: skipped >= 1"
    }
    if {$failed != 0} {xproc::fail $t "got failed: $failed, want: 0"}
  }

  set wantChannelOutput "\nTotal: \\d+,  Passed: \\d+,  Skipped: 1,  Failed: 0\n"
  set channelOutput [TestHelpers::channelMonitor getWriteData $ch]
  if {![regexp $wantChannelOutput $channelOutput]} {
    xproc::fail $t \
        "got channelOutput: $channelOutput, want: $wantChannelOutput"
  }
  close $ch
}}

xproc::test xproc::descriptions {{t} {
  set cases {
    {input {-match {*xproc::descriptions *xproc::test}} minNum 2 maxNum 2}
    {input {-match {*xproc*}} minNum 5 maxNum 100}
    {input {} minNum 5 maxNum 25}
  }
  xproc::testCases $t $cases {{case} {
    dict with case {
      set got [xproc::descriptions {*}$input]
      set numGot [dict size $got]
      if {$numGot < $minNum || $numGot > $maxNum} {
        return -code error \
            "got num descriptions: $numGot, want >= $minNum && <= $maxNum"
      }
    }
  }}
}}


xproc::test xproc::describe {{t} {
  set cases {
    {input {DummyNotExist {{t} {}}}
     returnCodes {error}
     result {procedureName doesn't exist: DummyNotExist}}
  }
  xproc::testCases $t $cases {{case} {
    dict with case {xproc::describe {*}$input}
  }}
}}


xproc::test xproc::tests {{t} {
  set cases {
    {input {-match {*xproc::tests *xproc::test}} minNum 2 maxNum 2}
    {input {-match {*xproc*}} minNum 5 maxNum 100}
    {input {} minNum 5 maxNum 25}
  }
  xproc::testCases $t $cases {{case} {
    dict with case {
      set got [xproc::tests {*}$input]
      set numGot [dict size $got]
      if {$numGot < $minNum || $numGot > $maxNum} {
        return -code error \
            "got num tests: $numGot, want >= $minNum && <= $maxNum"
      }
    }
  }}
}}


test runTests-1 {Test ::xproc::test tests} -body {
  xproc::runTests -match {*::xproc*}
} -output {
Total: 16,  Passed: 16,  Skipped: 0,  Failed: 0
} -result {total 16 passed 16 skipped 0 failed 0}

cleanupTests
