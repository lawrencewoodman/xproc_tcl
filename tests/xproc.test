package require tcltest
namespace import tcltest::*

# Add module dir to tm paths
set ThisScriptDir [file dirname [info script]]
set ModuleDir [file normalize [file join $ThisScriptDir ..]]
::tcl::tm::path add $ModuleDir

package require xproc
xproc::remove descriptions -match {::xproc::*}

xproc::proc addNums2 {a b} {
  expr {$a+$b}
} -description {
  Add two numbers together and return the result

  This could work as follows:
    addNums2 7 9      ; # Would return 16
} -test {{t} {
  set cases {
    {input {7 9} want 16}
    {input {2 3} want 18}
    {input {2 4} want 6}
  }
  set i 0
  foreach c $cases {
    dict with c {
      set got [addNums2 {*}$input]
      if {$got != $want} {
        xproc::testFail $t "($i) got: $got, want: $want"
      }
    }
    incr i
  }
}}


xproc::proc addNums3 {a b} {
  expr {$a+$b}
} -description {
  Add two numbers together and return the result

  This could work as follows:
    addNums3 7 9      ; # Would return 16
} -test {{t} {
  set cases {
    {input {7 9} want 15}
    {input {2 3} want 5}
    {input {2 4} want 7}
  }
  xproc::testCases $t $cases {{input} {addNums3 {*}$input}}
}}


xproc::proc addNums4 {a b} {
  expr {$a+$b}
} -description {
  Add two numbers together and return the result

  This could work as follows:
    addNums4 7 9      ; # Would return 16
} -test {{t} {
  set cases {
    {input {7 9} want 16}
    {input {2 3} want 5}
    {input {2 4} want 6}
  }
  xproc::testCases $t $cases {{input} {addNums4 {*}$input}}
}}


proc addNums5 {a b} {
  expr {$a+$b}
}
xproc::describe addNums5 {
  Add two numbers together and return the result

  This could work as follows:
    addNums5 7 9      ; # Would return 16
}
xproc::test addNums5 {{t} {
  set cases {
    {input {7 9} want 16}
    {input {2 3} want 18}
    {input {2 4} want 6}
  }
  xproc::testCases $t $cases {{input} {addNums5 {*}$input}}
}}


xproc::proc addNums6 {a b} {
  expr {$a+$b}
} -description {
  Add two numbers together and return the result

  This could work as follows:
    addNums6 7 9      ; # Would return 16
} -test {{t} {
  set cases {
    {input {7 9} want 16}
    {input {2 3} want 17}
    {input {2 4} want 4}
    {input {2 4} want 9}
  }
  set i 0
  foreach c $cases {
    if {$i == 3} {
      error "Time to fail - i: $i"
    }
    dict with c {
      set got [addNums2 {*}$input]
      if {$got != $want} {
        xproc::testFail $t "($i) got: $got, want: $want"
      }
    }
    incr i
  }
}}


xproc::proc subNums {a b} {
  expr {$a-$b}
} -description {
  Subtract one number from another and return the result

  This could work as follows:
    subNums 7 9      ; # Would return -2
} -test {{t} {
  set cases {
    {input {7 9} want -2}
    {input {5 4} want 1}
    {input {2 4} want -2}
    {input {4 4} want 0}
  }
  xproc::testCases $t $cases {{input} {subNums {*}$input}}
}}


xproc::proc raiseErrorCmd {a b} {
  expr {$a-$c}
} -description {
  Raises an error because $c doesn't exist
} -test {{t} {
  raiseErrorCmd 4 5
}}


namespace eval aTestNamespace {
  xproc::proc cmdA {} {
    return "defined inside eval aTestNamespace"
  } -description {
    this is a description of cmdA
  } -test {{t} {
    set got [cmdA]
    set want "defined inside eval aTestNamespace"
    if {$got ne $want} {
      xproc::testFail $t "got: $got, want: $want"
    }
  } aTestNamespace}
}

xproc::proc aTestNamespace::cmdB {} {
  return "defined outside eval aTestNamespace"
} -description {
  this is a description of cmdB
} -test {{t} {
  set got [aTestNamespace::cmdB]
  set want "defined outside eval aTestNamespace"
  if {$got ne $want} {
    xproc::testFail $t "got: $got, want: $want"
  }
}}


xproc::proc ::aTestNamespace::cmdC {} {
  return "defined outside eval aTestNamespace"
} -description {
  this is a description of cmdC
} -test {{t} {
  set got [aTestNamespace::cmdC]
  set want "defined outside eval aTestNamespace"
  if {$got ne $want} {
    xproc::testFail $t "got: $got, want: $want"
  }
}}


# This shouldn't appear in tests or descriptions because is removed in both
namespace eval bTestNamespace {
  xproc::proc cmdA {} {
    return "defined inside eval bTestNamespace"
  } -description {
    this is a description of cmdA
  } -test {{t} {
    set got [cmdA]
    set want "defined inside eval bTestNamespace"
    if {$got ne $want} {
      xproc::testFail $t "got: $got, want: $want"
    }
  } bTestNamespace}
  xproc::proc cmdB {} {
    return "defined inside eval bTestNamespace"
  } -description {
    this is a description of cmdB
  } -test {{t} {
    set got [cmdB]
    set want "defined inside eval bTestNamespace"
    if {$got ne $want} {
      xproc::testFail $t "got: $got, want: $want"
    }
  } bTestNamespace}
}

#
# This shouldn't appear in tests or descriptions because is removed in both.
# This will be removed using remove all -match ...
namespace eval bbTestNamespace {
  xproc::proc cmdA {} {
    return "defined inside eval bbTestNamespace"
  } -description {
    this is a description of cmdA
  } -test {{t} {
    set got [cmdA]
    set want "defined inside eval bbTestNamespace"
    if {$got ne $want} {
      xproc::testFail $t "got: $got, want: $want"
    }
  } bbTestNamespace}
  xproc::proc cmdB {} {
    return "defined inside eval bbTestNamespace"
  } -description {
    this is a description of cmdB
  } -test {{t} {
    set got [cmdB]
    set want "defined inside eval bbTestNamespace"
    if {$got ne $want} {
      xproc::testFail $t "got: $got, want: $want"
    }
  } bbTestNamespace}
}


# This shouldn't appear in tests because is removed
namespace eval cTestNamespace {
  xproc::proc cmdA {} {
    return "defined inside eval cTestNamespace"
  } -description {
    this is a description of cmdA
  } -test {{t} {
    set got [cmdA]
    set want "defined inside eval cTestNamespace"
    if {$got ne $want} {
      xproc::testFail $t "got: $got, want: $want"
    }
  } cTestNamespace}
}


# This shouldn't appear in descriptions because is removed
namespace eval dTestNamespace {
  xproc::proc cmdA {} {
    return "defined inside eval dTestNamespace"
  } -description {
    this is a description of cmdA
  } -test {{t} {
    set got [cmdA]
    set want "defined inside eval dTestNamespace"
    if {$got ne $want} {
      xproc::testFail $t "got: $got, want: $want"
    }
  } dTestNamespace}
}

# Remove relevant namespaces as described above
xproc::remove tests -match {::bTestName* ::cTestName*}
xproc::remove descriptions -match {::bTestName* ::dTestName*}
xproc::remove all -match {::bbTestName*}


test proc-1 {Allows normal definition of a proc} -body {
  xproc::proc addNums {a b} {expr {$a+$b}}
  addNums 7 9
} -result {16}


xproc::proc waitMS {ms} {
  after $ms
} -test {{t} {
  set timeStart [clock microseconds]
  waitMS 100
  set timeEnd [clock microseconds]
  set timeElapsed [expr {$timeEnd-$timeStart}]
  if {$timeElapsed < 100000 || $timeElapsed > 1000000} {
    xproc::testFail $t "timeElapsed: $timeElapsed"
  }
}}


test runTests-1 {Ensure timings work} -body {
  xproc::runTests -verbose -match {*waitMS}
} -output {=== RUN   ::waitMS
--- PASS  ::waitMS (0.10s)

Total: 18,  Passed: 1,  Skipped: 17,  Failed: 0
} -result 0
xproc::remove all -match {*waitMS}


test runTests-2 {Provide correct test output} -body {
  xproc::runTests
} -output [string map [list !openBrace! "\{"] {--- FAIL  ::addNums2
---       (1) got: 5, want: 18
--- FAIL  ::addNums3
---       (0) got: 16, want: 15
--- FAIL  ::addNums3
---       (2) got: 6, want: 7
--- FAIL  ::addNums5
---       (1) got: 5, want: 18
--- FAIL  ::addNums6
---       (1) got: 5, want: 17
--- FAIL  ::addNums6
---       (2) got: 6, want: 4
--- FAIL  ::addNums6
---       Time to fail - i: 3
              while executing
          "error "Time to fail - i: $i""
              (lambda term "{t} !openBrace!
            set cases !openBrace!
              {input {7 9} want 16}
              !openBrace!input !openBrace!2 ..." line 11)
              invoked from within
          "apply !openBrace!{t} !openBrace!
            set cases {
              {input {7 9} want 16}
              {input {2 3} want 17}
              {input {2 4} want 4}
              {input {2 4} want 9}
            }
            set i 0
            forea..."
              ("uplevel" body line 1)
              invoked from within
          "uplevel 1 [list apply $lambda $procName]"
--- FAIL  ::raiseErrorCmd
---       can't read "c": no such variable
              while executing
          "expr {$a-$c}"
              (procedure "raiseErrorCmd" line 2)
              invoked from within
          "raiseErrorCmd 4 5"
              (lambda term "{t} {
            raiseErrorCmd 4 5
          }" line 2)
              invoked from within
          "apply {{t} {
            raiseErrorCmd 4 5
          }} ::raiseErrorCmd"
              ("uplevel" body line 1)
              invoked from within
          "uplevel 1 [list apply $lambda $procName]"

Total: 17,  Passed: 12,  Skipped: 0,  Failed: 5
}] -result 5


test runTests-3 {Provide extra test output with -verbose} -body {
  xproc::runTests -verbose
} -output [string map [list !openBrace! "\{"] {=== RUN   ::xproc::MakeSummary
--- PASS  ::xproc::MakeSummary (0.00s)
=== RUN   ::xproc::MatchProcName
--- PASS  ::xproc::MatchProcName (0.00s)
=== RUN   ::xproc::IndentEachLine
--- PASS  ::xproc::IndentEachLine (0.00s)
=== RUN   ::xproc::CountIndent
--- PASS  ::xproc::CountIndent (0.00s)
=== RUN   ::xproc::StripIndent
--- PASS  ::xproc::StripIndent (0.00s)
=== RUN   ::xproc::TidyDescription
--- PASS  ::xproc::TidyDescription (0.00s)
=== RUN   ::addNums2
--- FAIL  ::addNums2
---       (1) got: 5, want: 18
=== RUN   ::addNums3
--- FAIL  ::addNums3
---       (0) got: 16, want: 15
--- FAIL  ::addNums3
---       (2) got: 6, want: 7
=== RUN   ::addNums4
--- PASS  ::addNums4 (0.00s)
=== RUN   ::addNums5
--- FAIL  ::addNums5
---       (1) got: 5, want: 18
=== RUN   ::addNums6
--- FAIL  ::addNums6
---       (1) got: 5, want: 17
--- FAIL  ::addNums6
---       (2) got: 6, want: 4
--- FAIL  ::addNums6
---       Time to fail - i: 3
              while executing
          "error "Time to fail - i: $i""
              (lambda term "{t} !openBrace!
            set cases !openBrace!
              {input {7 9} want 16}
              !openBrace!input !openBrace!2 ..." line 11)
              invoked from within
          "apply !openBrace!{t} !openBrace!
            set cases {
              {input {7 9} want 16}
              {input {2 3} want 17}
              {input {2 4} want 4}
              {input {2 4} want 9}
            }
            set i 0
            forea..."
              ("uplevel" body line 1)
              invoked from within
          "uplevel 1 [list apply $lambda $procName]"
=== RUN   ::subNums
--- PASS  ::subNums (0.00s)
=== RUN   ::raiseErrorCmd
--- FAIL  ::raiseErrorCmd
---       can't read "c": no such variable
              while executing
          "expr {$a-$c}"
              (procedure "raiseErrorCmd" line 2)
              invoked from within
          "raiseErrorCmd 4 5"
              (lambda term "{t} {
            raiseErrorCmd 4 5
          }" line 2)
              invoked from within
          "apply {{t} {
            raiseErrorCmd 4 5
          }} ::raiseErrorCmd"
              ("uplevel" body line 1)
              invoked from within
          "uplevel 1 [list apply $lambda $procName]"
=== RUN   ::aTestNamespace::cmdA
--- PASS  ::aTestNamespace::cmdA (0.00s)
=== RUN   ::aTestNamespace::cmdB
--- PASS  ::aTestNamespace::cmdB (0.00s)
=== RUN   ::aTestNamespace::cmdC
--- PASS  ::aTestNamespace::cmdC (0.00s)
=== RUN   ::dTestNamespace::cmdA
--- PASS  ::dTestNamespace::cmdA (0.00s)

Total: 17,  Passed: 12,  Skipped: 0,  Failed: 5
}] -result 5


test runTests-4 {Just test certain tests using -match} -body {
  xproc::runTests -verbose -match {*::M* ::ad*ums4 *2 ::aTest*}
} -output [string map [list !openBrace! "\{"] {=== RUN   ::xproc::MakeSummary
--- PASS  ::xproc::MakeSummary (0.00s)
=== RUN   ::xproc::MatchProcName
--- PASS  ::xproc::MatchProcName (0.00s)
=== RUN   ::addNums2
--- FAIL  ::addNums2
---       (1) got: 5, want: 18
=== RUN   ::addNums4
--- PASS  ::addNums4 (0.00s)
=== RUN   ::aTestNamespace::cmdA
--- PASS  ::aTestNamespace::cmdA (0.00s)
=== RUN   ::aTestNamespace::cmdB
--- PASS  ::aTestNamespace::cmdB (0.00s)
=== RUN   ::aTestNamespace::cmdC
--- PASS  ::aTestNamespace::cmdC (0.00s)

Total: 17,  Passed: 6,  Skipped: 10,  Failed: 1
}] -result 1


test descriptions-1 {Return descriptions} -body {
  xproc::descriptions
} -result [dict create ::addNums2 {Add two numbers together and return the result

This could work as follows:
  addNums2 7 9      ; # Would return 16} \
::addNums3 {Add two numbers together and return the result

This could work as follows:
  addNums3 7 9      ; # Would return 16} \
::addNums4 {Add two numbers together and return the result

This could work as follows:
  addNums4 7 9      ; # Would return 16} \
::addNums5 {Add two numbers together and return the result

This could work as follows:
  addNums5 7 9      ; # Would return 16} \
::addNums6 {Add two numbers together and return the result

This could work as follows:
  addNums6 7 9      ; # Would return 16} \
::subNums {Subtract one number from another and return the result

This could work as follows:
  subNums 7 9      ; # Would return -2} \
::raiseErrorCmd {Raises an error because $c doesn't exist} \
::aTestNamespace::cmdA {this is a description of cmdA} \
::aTestNamespace::cmdB {this is a description of cmdB} \
::aTestNamespace::cmdC {this is a description of cmdC} \
::cTestNamespace::cmdA {this is a description of cmdA}]


test descriptions-2 {Return specified descriptions using -match} -body {
  xproc::descriptions -match {addNums5 ::addNums6 *ubN* *cmdA*}
} -result [dict create ::addNums6 {Add two numbers together and return the result

This could work as follows:
  addNums6 7 9      ; # Would return 16} \
::subNums {Subtract one number from another and return the result

This could work as follows:
  subNums 7 9      ; # Would return -2} \
::aTestNamespace::cmdA {this is a description of cmdA} \
::cTestNamespace::cmdA {this is a description of cmdA}]


cleanupTests
