package require tcltest
namespace import tcltest::*

# Add module dir to tm paths
set ThisScriptDir [file dirname [info script]]
set ModuleDir [file normalize [file join $ThisScriptDir ..]]
::tcl::tm::path add $ModuleDir

source [file join $ThisScriptDir test_helpers.tcl]

package require xproc


################################
# tcltest is at bottom of file
################################


xproc::test xproc::proc {{t} {
  # Check errors
  set cases {
    {input {xproc::Dummy-1 {} {} -bob}
     returnCodes {error} result "unknown option: -bob"}
    {input {xproc::Dummy-2 {} {} bob}
     returnCodes {error} result "invalid number of arguments"}
    {input {xproc::Dummy-3 {a b} {
              expr {$a+$b}
            } -test {{t} {
              set got [xproc::Dummy-3 2 3]
              set want 5
              if {$got != $want} {
                xproc::fail $t "got: $got, want: $want"
              }
            }} -description {Add two numbers together}}
     passed 1 failed 0 minTotal 5 maxTotal 50}

  }
  xproc::testCases $t $cases {{case} {
    try {
      dict with case {
        xproc::proc {*}$input
        set gotSummary [xproc::runTests -match {::xproc::Dummy-*} -verbose 0]
        set wantDescriptions [list \
          [dict create interp {} \
                       name ::xproc::Dummy-3 \
                       description {Add two numbers together}]
        ]
        dict with gotSummary {
          if {$passed != $passed || $failed != $failed ||
              $total <= $minTotal || $total >= $maxTotal} {
            return -code error "summary incorrect - got: $gotSummary"
          }
        }
        set gotDescriptions [xproc::descriptions -match {::xproc::Dummy-*}]
        if {$gotDescriptions ne $wantDescriptions} {
          return -code error \
              "descriptions - got: $gotDescriptions, want: $wantDescriptions"
        }
      }
    } finally {
      xproc::remove all -match {::xproc::Dummy-*}
      catch {rename xproc::[lindex $input 0] ""}
    }
  }}
}}


xproc::test -id 1 xproc::remove {{t} {
  # Test errors
  set cases {
    {input {all -fred}
     returnCodes {error} result "unknown option: -fred"}
    {input {bob}
     returnCodes {error} result "unknown type: bob"}
  }
  xproc::testCases $t $cases {{case} {
    dict with case {xproc::remove {*}$input}
  }}
}}

xproc::test -id 2 xproc::remove {{t} {
  try {
    for {set n 1} {$n <= 3} {incr n} {
      xproc::proc xproc::Dummy-$n {a b} {
        expr {$a+$b}
      } -test {{t} {
        set got [xproc::Dummy-3 2 3]
        set want 5
        if {$got != $want} {
          xproc::fail $t "got: $got, want: $want"
        }
      }} -description {Add two numbers together}
    }
    xproc::remove tests -match {*Dummy-2}
    set gotSummary [xproc::runTests -match {::xproc::Dummy-*} -verbose 0]
    dict with gotSummary {
      if {$passed != 2 || $failed != 0 || $total < 5 || $total > 100} {
        xproc::fail $t \
            "after remove tests Dummy-2 - summary incorrect - got: $gotSummary"
      }
    }
    xproc::remove descriptions -match {*Dummy-3}
    set gotDescriptions [xproc::descriptions -match {::xproc::Dummy-*}]
    set gotDescriptionProcNames [
      lmap desc $gotDescriptions {dict get $desc name}
    ]
    set wantDescriptionProcNames {::xproc::Dummy-1 ::xproc::Dummy-2}
    if {$gotDescriptionProcNames ne $wantDescriptionProcNames} {
      xproc::fail $t \
          "after remove descriptions Dummy-3 - descriptions - got keys: $gotDescriptionProcNames, want: $wantDescriptionProcNames"
    }
    xproc::remove all -match {::xproc::Dummy-*}
    set gotSummary [xproc::runTests -match {::xproc::Dummy-*} -verbose 0]
    dict with gotSummary {
      if {$passed != 0 || $failed != 0 || $total < 5 || $total > 100} {
        xproc::fail $t \
            "after remove all Dummy-* - summary incorrect - got: $gotSummary"
      }
    }
    set gotDescriptions [xproc::descriptions -match {::xproc::Dummy-*}]
    set gotDescriptionProcNames [
      lmap desc $gotDescriptions {dict get $desc name}
    ]
    if {[llength $gotDescriptionProcNames] != 0} {
      xproc::fail $t \
          "after remove descriptions all Dummy-* descriptions - got keys: $gotDescriptionProcNames, want: $wantDescriptionProcNames"
    }
  } finally {
    xproc::remove all -match {::xproc::Dummy-*}
    rename xproc::Dummy-1 ""
    rename xproc::Dummy-2 ""
    rename xproc::Dummy-3 ""
  }
}}


xproc::test -id 3 xproc::remove {{t} {
  # Test -interp
  set safeInterp [interp create -safe]
  try {
    $safeInterp alias test ::xproc::test -interp $safeInterp
    $safeInterp alias describe ::xproc::describe -interp $safeInterp
    $safeInterp alias testFail ::xproc::fail
    $safeInterp alias testCases ::xproc::testCases -interp $safeInterp

    $safeInterp eval {
      proc add5 {n} {
        expr {$n+5}
      }
      proc add6 {n} {
        expr {$n+6}
      }
      test -id 1 add6 {{t} {
        testFail $t "this is a fail message"
      }}
      test -id 1 add5 {{t} {
        set cases {
          {input {3} result {8}}
          {input {10} result {15}}
        }
        testCases $t $cases {{case} {dict with case {add5 $input}}}
      }}
      test -id 2 add5 {{t} {
        testFail $t "this is a fail message"
      }}
      describe add5 {
        This is a description of add5
      }
      describe add6 {
        This is a description of add6
      }
    }

    if {[llength [xproc::tests -interp $safeInterp]] != 3} {
      return -code error "wrong number of tests in safeInterp"
    }
    xproc::remove all -interp $safeInterp -match {*add6}
    set numDescriptions [llength [xproc::descriptions -interp $safeInterp]]
    set wantNumDescriptions 1
    if {$numDescriptions != $wantNumDescriptions} {
      xproc::fail $t \
          "got numDescriptions: $numDescriptions, want: $wantNumDescriptions"
    }
    set numTests [llength [xproc::tests -interp $safeInterp]]
    set wantNumTests 2
    if {$numTests != $wantNumTests} {
      xproc::fail $t "got numTests: $numTests, want: $wantNumTests"
    }
  } finally {
    interp delete $safeInterp
    xproc::remove all -interp $safeInterp
  }
}}


xproc::test -id 1 xproc::test {{t} {
  # Test errors
  set cases {
    {input {DummyNotExist}
     returnCodes {error}
     result {invalid number of arguments}}
    {input {DummyNotExist {{t} {}}}
     returnCodes {error}
     result {procedureName doesn't exist: DummyNotExist}}
    {input {-id fred DummyNotExist {{t} {}}}
     returnCodes {error}
     result {invalid id: fred}}
    {input {-id 0 DummyNotExist {{t} {}}}
     returnCodes {error}
     result {invalid id: 0}}
    {input {-bob DummyNotExist {{t} {}}}
     returnCodes {error}
     result {unknown option: -bob}}
    {input {-id 1 xproc::test {{t} {}}}
     returnCodes {error}
     result {test already exists for procedure: ::xproc::test, id: 1}}
    {input {-interp "*" xproc::test {{t} {}}}
     returnCodes {error}
     result {interpreter doesn't exist: *}}
  }
  xproc::testCases $t $cases {{case} {
    dict with case {xproc::test {*}$input}
  }}
}}

xproc::test -id 2 xproc::test {{t} {
  # Test adding of tests using -id
  xproc::test -- ::TestHelpers::addNums {{t} {
    set got [::TestHelpers::addNums 7 8 9]
    set want 24
    if {$got != $want} {xproc::fail $t "got: $got, want: $want"}
  }}
  xproc::test -id 2 ::TestHelpers::addNums {{t} {
    set got [::TestHelpers::addNums 1 2 3]
    set want 6
    if {$got != $want} {xproc::fail $t "got: $got, want: $want"}
  }}
  try {
    set summary [xproc::runTests -verbose 0 -match {::TestHelpers::addNums}]
    set wantPassed 2
    set wantFailed 0
    dict with summary {
      if {$passed != $wantPassed} {
        xproc::fail $t "got passed: $passed, want: $wantPassed"
      }
      if {$failed != $wantFailed} {
        xproc::fail $t "got failed: $failed, want: $wantFailed"
      }
    }
  } finally {
    xproc::remove all -match {::TestHelpers::addNums}
  }
}}


xproc::test -id 1 xproc::runTests {{t} {
  # Run all xproc tests except this one to prevent an infinite loop
  set ch [TestHelpers::channelMonitor new]
  set tests [
    xproc::LFilter {} [xproc::tests -match {*xproc::*}] {{vars test} {
      expr {![string match "*xproc::runTests" [dict get $test name]]}
    }}
  ]
  set procNames [lmap test $tests {dict get $test name}]
  set summary [xproc::runTests -verbose 1 -channel $ch -match $procNames]
  dict with summary {
    set wantTotal [expr {$passed+$failed+$skipped}]
    if {$total != $wantTotal} {
      xproc::fail $t "got total: $total, want: $wantTotal"
    }
    if {$passed < 5} {
      xproc::fail $t "got passed: $passed, want: >= 5"
    }
    if {$skipped < 5} {
      xproc::fail $t "got skipped: $skipped, want: >= 5"
    }
    if {$failed != 0} {xproc::fail $t "got failed: $failed, want: 0"}
  }

  set wantChannelOutput \
      "\nTotal: \\d+,  Passed: \\d+,  Skipped: \\d+,  Failed: 0\n"
  set channelOutput [TestHelpers::channelMonitor getWriteData $ch]
  if {![regexp $wantChannelOutput $channelOutput]} {
    xproc::fail $t \
        "got channelOutput: $channelOutput, want: $wantChannelOutput"
  }
  close $ch
}}


xproc::test -id 2 xproc::runTests {{t} {
  # Check timings work
  xproc::test -id 1 ::TestHelpers::waitMS {{t} {
    set timeStart [clock microseconds]
    ::TestHelpers::waitMS 100
    set timeEnd [clock microseconds]
    set timeElapsed [expr {$timeEnd-$timeStart}]
    if {$timeElapsed < 100000 || $timeElapsed > 1000000} {
      xproc::fail $t  "timeElapsed: $timeElapsed"
    }
  }}
  xproc::test -id 2 ::TestHelpers::waitMS {{t} {
    set timeStart [clock microseconds]
    ::TestHelpers::waitMS 150
    xproc::fail $t  "here is an error"
  }}
  set ch [TestHelpers::channelMonitor new]
  try {
    xproc::runTests -verbose 2 -channel $ch -match {*TestHelpers::waitMS}
    set channelOutput [TestHelpers::channelMonitor::getWriteData $ch]
    set lines [split $channelOutput "\n"]
    set captureLines {}
    foreach line $lines {
      if {[string match {--- FAIL*} $line] ||
          [string match {--- PASS*} $line]} {
        lappend captureLines $line
      }
    }
    set wantCaptureLines [
      list "--- PASS  ::TestHelpers::waitMS/1 (0.10s)" \
           "--- FAIL  ::TestHelpers::waitMS/2 (0.15s)"
    ]
    if {$captureLines ne $wantCaptureLines} {
      xproc::fail $t \
          "got capture lines: $captureLines, want: $wantCaptureLines"
    }
  } finally {
    xproc::remove all -match {*TestHelpers::waitMS}
    close $ch
  }
}}


xproc::test -id 3 xproc::runTests {{t} {
  # -verbose 0 should produce no output to stdout
  set ch [TestHelpers::channelMonitor new]
  try {
    xproc::runTests -verbose 0 -channel $ch -match {*xproc::t*}
    set channelOutput [TestHelpers::channelMonitor::getWriteData $ch]
    if {$channelOutput ne ""} {
      xproc::fail $t "incorrect channel output: $channelOutput"
    }
  } finally {
    close $ch
  }
}}


xproc::test -id 4 xproc::runTests {{t} {
  # -verbose 1 should only list failing tests and summary
  xproc::test -id 1 ::TestHelpers::addNums {{t} {
    set got [::TestHelpers::addNums 7 8 9]
    set want 24
    if {$got != $want} {xproc::fail $t "got: $got, want: $want"}
  }}
  xproc::test -id 2 ::TestHelpers::addNums {{t} {
    xproc::fail $t  "here is an error"
  }}
  xproc::test -id 3 ::TestHelpers::addNums {{t} {
    xproc::fail $t  "here is another error"
  }}
  xproc::test ::TestHelpers::waitMS {{t} {
    xproc::fail $t  "here is yet another error"
  }}
  set ch [TestHelpers::channelMonitor new]
  try {
    xproc::runTests -verbose 1 -channel $ch -match {
      *TestHelpers::addNums
      *TestHelpers::waitMS
    }
    set channelOutput [TestHelpers::channelMonitor::getWriteData $ch]
    set channelLines [split $channelOutput "\n"]
    set wantLines [list \
        {--- FAIL  ::TestHelpers::addNums\/2 \(0.00s\)} \
        {          here is an error} \
        {--- FAIL  ::TestHelpers::addNums\/3 \(0.00s\)} \
        {          here is another error} \
        {--- FAIL  ::TestHelpers::waitMS\/1 \(0.00s\)} \
        {          here is yet another error} \
        {} \
        {Total: \d+,  Passed: 1,  Skipped: \d+,  Failed: 3} \
        {}
    ]
    foreach gotLine $channelLines wantLine $wantLines {
      if {![regexp $wantLine $gotLine]} {
        xproc::fail $t "got output line: $gotLine, want: $wantLine"
      }
    }
  } finally {
    xproc::remove all -match {*TestHelpers::addNums *TestHelpers::waitMS}
    close $ch
  }
}}


xproc::test -id 5 xproc::runTests {{t} {
  # -verbose 2 should only list summary and all tests
  xproc::test -id 1 ::TestHelpers::addNums {{t} {
    set got [::TestHelpers::addNums 7 8 9]
    set want 24
    if {$got != $want} {xproc::fail $t "got: $got, want: $want"}
  }}
  xproc::test -id 2 ::TestHelpers::addNums {{t} {
    xproc::fail $t  "here is an error"
  }}
  xproc::test -id 3 ::TestHelpers::addNums {{t} {
    xproc::fail $t  "here is another error"
  }}
  xproc::test ::TestHelpers::waitMS {{t} {
    xproc::fail $t  "here is yet another error"
  }}
  set ch [TestHelpers::channelMonitor new]
  try {
    xproc::runTests -verbose 2 -channel $ch -match {
      *TestHelpers::addNums
      *TestHelpers::waitMS
    }
    set channelOutput [TestHelpers::channelMonitor::getWriteData $ch]
    set channelLines [split $channelOutput "\n"]
    set gotNums {run 0 fail 0 pass 0 skip 0 summary 0}
    foreach line $channelLines {
      if {[string match {=== RUN*} $line]} {dict incr gotNums run}
      if {[string match {--- FAIL*} $line]} {dict incr gotNums fail}
      if {[string match {--- PASS*} $line]} {dict incr gotNums pass}
      if {[string match {=== SKIP*} $line]} {dict incr gotNums skip}
      if {[string match {Total*} $line]} {dict incr gotNums summary}
    }
    set wantRun 4
    set wantFail 3
    set wantPass 1
    set wantSummary 1
    dict with gotNums {
      if {$run != $wantRun} {
        xproc::fail $t "got run: $run, want: $wantRun"
      }
      if {$fail != $wantFail} {
        xproc::fail $t "got fail: $fail, want: $wantFail"
      }
      if {$pass != $wantPass} {
        xproc::fail $t "got pass: $pass, want: $wantPass"
      }
      if {$skip < 1} {
        xproc::fail $t "got skip: $skip, want >= 1"
      }
      if {$summary != $wantSummary} {
        xproc::fail $t "got summary: $summary, want: $wantSummary"
      }
    }
  } finally {
    xproc::remove all -match {*TestHelpers::addNums *TestHelpers::waitMS}
    close $ch
  }
}}


xproc::test -id 6 xproc::runTests {{t} {
  # Check correct fail output for different sorts of errors
  xproc::test ::TestHelpers::raiseErrorCmd {{t} {
    ::TestHelpers::raiseErrorCmd 4 5
  }}
  xproc::test -id 1 ::TestHelpers::addNums {{t} {
    set cases {
      {input {7 9} result 16}
      {input {2 3} result 17}
      {input {2 4} result 4}
      {input {2 4} result 9}
    }
    set i 0
    foreach c $cases {
      if {$i == 3} {
        error "Time to fail - i: $i"
      }
      dict with c {
        set got [::TestHelpers::addNums {*}$input]
        if {$got != $result} {
          xproc::fail $t  "($i) got: $got, want: $result"
        }
      }
      incr i
    }
  }}

  # Checks if a testCase lambda raises an error it should be recorded
  # even if no result specified
  xproc::test -id 2 ::TestHelpers::addNums {{t} {
    set cases {
      {input {5 4}}
      {input {2 4 7} returnCodes {error}}
      {input {4 4}}
    }
    xproc::testCases $t $cases {{case} {
      dict with case {
        if {[llength $input] == 3} {
          return -code error "too many values in input"
        }
        ::TestHelpers::addNums {*}$input
      }
    }}
  }}
  set ch [TestHelpers::channelMonitor new]
  try {
    set summary [
      xproc::runTests -channel $ch -match {
        ::TestHelpers::raiseErrorCmd ::TestHelpers::addNums
      }
    ]
    set channelOutput [TestHelpers::channelMonitor getWriteData $ch]
    set lines [split $channelOutput "\n"]
    set captureMore false
    set captureLines {}
    foreach line $lines {
      if {[string match {--- FAIL*} $line]} {
        lappend captureLines $line
        set captureMore true
      } elseif {$captureMore} {
        lappend captureLines $line
        if {[string match {*while executing} $line]} {
          set captureMore false
        }
      }
    }
    set totalLine [lindex $captureLines end-1]
    set totalLineCorrect [
      regexp {Total: \d+,  Passed: 0,  Skipped: \d+,  Failed: 3} $totalLine
    ]
    set captureLines [lrange $captureLines 0 end-2]
    set got [
      dict create numFailed [dict get $summary failed] \
                  captureLines $captureLines \
                  totalLineCorrect $totalLineCorrect
    ]
    set want [dict create numFailed 3 \
        captureLines [list \
            "--- FAIL  ::TestHelpers::raiseErrorCmd/1 (0.00s)" \
            "          can't read \"c\": no such variable" \
            "              while executing" \
            "--- FAIL  ::TestHelpers::addNums/1 (0.00s)" \
            "          (1) got: 5, want: 17" \
            "          (2) got: 6, want: 4" \
            "          Time to fail - i: 3" \
            "              while executing" \
            "--- FAIL  ::TestHelpers::addNums/2 (0.00s)" \
            "          (1) too many values in input" \
            ""
        ] \
        totalLineCorrect 1
    ]
    if {$got ne $want} {
      xproc::fail $t "got: $got, want: $want"
    }
  } finally {
    xproc::remove all -match {*TestHelpers::addNums *TestHelpers::waitMS}
    close $ch
  }
}}


xproc::test -id 7 xproc::runTests {{t} {
  # Test -interp
  set safeInterp [interp create -safe]
  $safeInterp alias test ::xproc::test -interp $safeInterp
  $safeInterp alias testFail ::xproc::fail
  $safeInterp alias testCases ::xproc::testCases -interp $safeInterp

  $safeInterp eval {
    proc add5 {n} {
      expr {$n+5}
    }
    test -id 1 add5 {{t} {
      set cases {
        {input {3} result {8}}
        {input {10} result {15}}
      }
      testCases $t $cases {{case} {dict with case {add5 $input}}}
    }}
    test -id 2 add5 {{t} {
      testFail $t "this is a fail message"
    }}
  }
  try {
    set summary [xproc::runTests -verbose 0 -interp $safeInterp -match {*add5}]
    set wantTotal 2
    set wantPassed 1
    set wantFailed 1
    dict with summary {
      if {$total != $wantTotal} {
        xproc::fail $t "got total: $total, want: $wantTotal"
      }
      if {$passed != $wantPassed} {
        xproc::fail $t "got passed: $passed, want: $wantPassed"
      }
      if {$failed != $wantFailed} {
        xproc::fail $t "got failed: $failed, want: $wantFailed"
      }
    }
  } finally {
    interp delete $safeInterp
    xproc::remove all -interp $safeInterp
  }
}}


xproc::test -id 1 xproc::descriptions {{t} {
  set cases {
    {input {-match {*xproc::descriptions *xproc::test}} minNum 2 maxNum 2}
    {input {-match {*xproc*}} minNum 5 maxNum 100}
    {input {} minNum 5 maxNum 25}
  }
  xproc::testCases $t $cases {{case} {
    dict with case {
      set got [xproc::descriptions {*}$input]
      set numGot [llength $got]
      if {$numGot < $minNum || $numGot > $maxNum} {
        return -code error \
            "got num descriptions: $numGot, want >= $minNum && <= $maxNum"
      }
    }
  }}
}}


xproc::test -id 2 xproc::descriptions {{t} {
  # Check that there is a description for each exported xproc command
  foreach cmd [info commands ::xproc::*] {
    if {[regexp {^::xproc::[a-z]+.*$} $cmd]} {lappend exportedCommands $cmd}
  }
  set numXprocExportedCommands [llength $exportedCommands]
  if {$numXprocExportedCommands < 5} {
    return -code error "too few exported xproc commands: $numXprocExportedCommands"
  }
  set numXprocDescriptions [llength [xproc::descriptions -match {*xproc*}]]
  if {$numXprocExportedCommands != $numXprocDescriptions} {
    xproc::fail $t "got num xproc descriptions: $numXprocDescriptions, want: $numXprocExportedCommands"
  }
}}


xproc::test -id 3 xproc::descriptions {{t} {
  # Check that descriptions are returned properly
  xproc::describe TestHelpers::addNums {
    A function to add a sequence of numbers together
  }
  xproc::describe TestHelpers::waitMS {
    Wait for a specified number of milliseconds
  }
  try {
    set got [
      xproc::descriptions -match {*TestHelpers::addNums *TestHelpers::waitMS}
    ]
    set want [list \
      [dict create interp {} \
                   name ::TestHelpers::addNums \
                   description {A function to add a sequence of numbers together}] \
      [dict create interp {} \
                   name ::TestHelpers::waitMS \
                   description {Wait for a specified number of milliseconds}]
    ]
    if {$got ne $want} {
      xproc::fail $t "got: $got, want: $want"
    }
  } finally {
    xproc::remove descriptions \
        -match {*TestHelpers::addNums *TestHelpers::waitMS}
  }
}}


xproc::test -id 4 xproc::descriptions {{t} {
  # Test -interp
  set safeInterp [interp create -safe]
  try {
    $safeInterp alias describe ::xproc::describe -interp $safeInterp
    $safeInterp eval {
      proc add5 {n} {expr {$n+5}}
      proc add6 {n} {expr {$n+6}}
      proc add7 {n} {expr {$n+7}}
      describe add5 {a description for add5}
      describe add6 {a description for add6}
      describe add7 {a description for add7}
    }
    set gotNum [llength [xproc::descriptions -interp $safeInterp]]
    set wantNum 3
    if {$gotNum != $wantNum} {
      xproc::fail $t "gotNum: $gotNum, want: $wantNum"
    }
  } finally {
    interp delete $safeInterp
    xproc::remove all -interp $safeInterp
  }
}}


xproc::test xproc::describe {{t} {
  set cases {
    {input {DummyNotExist {a description of DummNotExist}}
     returnCodes {error}
     result {procedureName doesn't exist: DummyNotExist}}
    {input {xproc::describe  {a description of describe}}
     returnCodes {error}
     result {description already exists for procedure: ::xproc::describe}}
    {input {-interp "*" xproc::describe {a description for describe}}
     returnCodes {error}
     result {interpreter doesn't exist: *}}
  }
  xproc::testCases $t $cases {{case} {
    dict with case {xproc::describe {*}$input}
  }}
}}


xproc::test -id 2 xproc::describe {{t} {
  # Test -interp
  set safeInterp [interp create -safe]
  try {
    if {[llength [xproc::descriptions -interp $safeInterp]] > 0} {
      return -error "descriptions already present for interpreter"
    }
    $safeInterp eval {
      proc add5 {n} {expr {$n+5}}
      proc add6 {n} {expr {$n+6}}
      proc add7 {n} {expr {$n+7}}
    }
    xproc::describe -interp $safeInterp add5 {a description for add5}
    xproc::describe -interp $safeInterp add6 {a description for add6}
    xproc::describe -interp $safeInterp add7 {a description for add7}
    set gotNum [llength [xproc::descriptions -interp $safeInterp]]
    set wantNum 3
    if {$gotNum != $wantNum} {
      xproc::fail $t "gotNum: $gotNum, want: $wantNum"
    }
  } finally {
    interp delete $safeInterp
    xproc::remove all -interp $safeInterp
  }
}}


xproc::test -id 1 xproc::tests {{t} {
  set cases {
    {input {-match {*xproc::tests *xproc::test}} minNum 5 maxNum 5}
    {input {-match {*xproc*}} minNum 5 maxNum 100}
    {input {} minNum 5 maxNum 50}
  }
  xproc::testCases $t $cases {{case} {
    dict with case {
      set got [xproc::tests {*}$input]
      set numGot [llength $got]
      if {$numGot < $minNum || $numGot > $maxNum} {
        return -code error \
            "got num tests: $numGot, want >= $minNum && <= $maxNum"
      }
    }
  }}
}}


xproc::test -id 2 xproc::tests {{t} {
  # Test errors
  set cases {
    {input {fred} returnCodes {error} result {invalid number of arguments}}
    {input {-bob} returnCodes {error} result {unknown option: -bob}}
  }
  xproc::testCases $t $cases {{case} {
    dict with case {xproc::tests {*}$input}
  }}
}}


xproc::test -id 3 xproc::tests {{t} {
  # Test -interp
  set safeInterp [interp create -safe]
  $safeInterp alias test ::xproc::test -interp $safeInterp
  $safeInterp alias testFail ::xproc::fail
  $safeInterp alias testCases ::xproc::testCases -interp $safeInterp

  $safeInterp eval {
    proc add5 {n} {
      expr {$n+5}
    }
    test -id 1 add5 {{t} {
      set cases {
        {input {3} result {8}}
        {input {10} result {15}}
      }
      testCases $t $cases {{case} {dict with case {add5 $input}}}
    }}
    test -id 2 add5 {{t} {
      testFail $t "this is a fail message"
    }}
  }
  try {
    set got [xproc::tests -interp $safeInterp]
    if {[llength $got] != 2} {
      xproc::fail $t "got num tests: [llength $got], want: 2"
    }
  } finally {
    interp delete $safeInterp
    xproc::remove all -interp $safeInterp
  }
}}



test runTests-1 {Run all xproc tests} -body {
  set summary [xproc::runTests -verbose 1]
  dict with summary {
    set wantTotal [expr {$passed+$failed+$skipped}]
    set result [
      list [expr {$total == $wantTotal}] [expr {$passed > 20}] \
           [expr {$skipped == 0}] [expr {$failed == 0}]
    ]
  }
  set result
} -match regexp -output {
Total: \d+,  Passed: \d+,  Skipped: 0,  Failed: 0
} -result {1 1 1 1}



cleanupTests
